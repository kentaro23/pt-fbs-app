// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  PITCHER
  CATCHER
  INFIELDER
  OUTFIELDER
  OTHER
}

enum ThrowingSide {
  RIGHT
  LEFT
}

enum Batting {
  RIGHT
  LEFT
  SWITCH
}

enum Movement {
  SHOULDER_FLEX
  SHOULDER_ER_90
  SHOULDER_IR_90
  HORIZONTAL_ADDUCTION
  ELBOW_EXTENSION
  FOREARM_PRONATION
  FOREARM_SUPINATION
  HIP_FLEXION
  HIP_EXTENSION
  HIP_IR
  HIP_ER
}

enum BodySide {
  RIGHT
  LEFT
}

model Athlete {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  team             String?
  position         Position
  throwingSide     ThrowingSide
  batting          Batting
  heightCm         Float
  weightKg         Float
  bodyFatPercent   Float
  infieldPosition  InfieldPosition?
  assessments      Assessment[]
  romTargets       RomTarget[]
}

model Assessment {
  id               String     @id @default(cuid())
  athlete          Athlete    @relation(fields: [athleteId], references: [id])
  athleteId        String
  date             DateTime   @default(now())
  fatMassKg        Float
  leanMassKg       Float
  leanBodyIndex    Float
  swingSpeed       Float?
  notes            String?
  roms             Rom[]
}

model Rom {
  id            String     @id @default(cuid())
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId  String
  movement      Movement
  side          BodySide
  valueDeg      Float
  @@unique([assessmentId, movement, side])
}

// ====== PT-FBS Core: RBAC / Tenant / Patients / Records / Sessions (Minimal) ======

// Roles and types
enum Role {
  OWNER
  ADMIN
  THERAPIST
  ASSISTANT
  VIEWER
  ATHLETE
}

enum SessionStatus {
  SCHEDULED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum RecordType {
  SOAP
  EVAL
  PROGRESS
}

enum MetricType {
  VAS
  NRS
  ROM
  MMT
  CUSTOM
}

// Detailed infield positions (for baseball infield)
enum InfieldPosition {
  FIRST_BASE
  SECOND_BASE
  THIRD_BASE
  SHORTSTOP
}

// Tenant (Clinic/Team)
model Clinic {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  memberships Membership[]
  patients    Patient[]
  templates   EvaluationTemplate[]
  records     Record[]
  metrics     Metric[]
  sessions    Appointment[]
  reminders   Reminder[]
}

// Minimal user model for membership linkage (Auth導入前のプレースホルダ)
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  memberships  Membership[]
  records      Record[]
  assigned     Appointment[]     @relation("AppointmentAssignee")
  ownedTemplates EvaluationTemplate[] @relation("UserOwnedTemplates")
}

// User x Clinic with role
model Membership {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  clinic    Clinic  @relation(fields: [clinicId], references: [id])
  clinicId  String
  role      Role
  createdAt DateTime @default(now())

  @@unique([userId, clinicId])
}

// Patient with clinic isolation
model Patient {
  id          String   @id @default(cuid())
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  clinicId    String
  fullName    String
  sex         String?
  dob         DateTime?
  phone       String?
  email       String?
  allergies   String[]
  conditions  String[]
  tags        String[]
  consents    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  records     Record[]
  metrics     Metric[]
  sessions    Appointment[]
}

// Shared or personal templates
model EvaluationTemplate {
  id        String      @id @default(cuid())
  clinic    Clinic      @relation(fields: [clinicId], references: [id])
  clinicId  String
  owner     User?       @relation("UserOwnedTemplates", fields: [ownerId], references: [id])
  ownerId   String?
  name      String
  type      RecordType
  content   Json
  shared    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Clinical record with hashtags & json content
model Record {
  id        String      @id @default(cuid())
  clinic    Clinic      @relation(fields: [clinicId], references: [id])
  clinicId  String
  patient   Patient     @relation(fields: [patientId], references: [id])
  patientId String
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  type      RecordType
  hashtags  String[]
  content   Json
  createdAt DateTime    @default(now())
}

// Numeric metrics (VAS/NRS/ROM/MMT...)
model Metric {
  id         String      @id @default(cuid())
  clinic     Clinic      @relation(fields: [clinicId], references: [id])
  clinicId   String
  patient    Patient     @relation(fields: [patientId], references: [id])
  patientId  String
  date       DateTime    @default(now())
  metricType MetricType
  label      String?
  value      Float?
  side       BodySide?
  movement   Movement?
}

// ROM target per athlete per movement
model RomTarget {
  id         String    @id @default(cuid())
  athlete    Athlete   @relation(fields: [athleteId], references: [id])
  athleteId  String
  movement   Movement
  targetDeg  Float

  @@unique([athleteId, movement])
}

// Session lifecycle
model Appointment {
  id                String        @id @default(cuid())
  clinic            Clinic        @relation(fields: [clinicId], references: [id])
  clinicId          String
  patient           Patient       @relation(fields: [patientId], references: [id])
  patientId         String
  status            SessionStatus @default(SCHEDULED)
  scheduledAt       DateTime
  checkedInAt       DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  rescheduledReason String?
  assignee          User?         @relation("AppointmentAssignee", fields: [assigneeId], references: [id])
  assigneeId        String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  reminders         Reminder[]
}

// Notification scheduling (placeholder)
model Reminder {
  id          String   @id @default(cuid())
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  clinicId    String
  appointment Appointment  @relation(fields: [appointmentId], references: [id])
  appointmentId   String
  channel     String
  scheduledFor DateTime
  sentAt      DateTime?
}
