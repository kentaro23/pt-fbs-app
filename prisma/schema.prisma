generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Athlete {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  team            String?
  position        Position
  throwingSide    ThrowingSide
  batting         Batting
  heightCm        Float
  weightKg        Float
  bodyFatPercent  Float
  infieldPosition InfieldPosition?
  userId          String?
  assessments     Assessment[]
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  romTargets      RomTarget[]

  @@index([userId])
}

model Assessment {
  id                String   @id @default(cuid())
  athleteId         String
  date              DateTime @default(now())
  fatMassKg         Float
  leanMassKg        Float
  leanBodyIndex     Float
  swingSpeed        Float?
  notes             String?
  openHipMark       Mark3?
  bridgeMark        Mark3?
  forwardBendMark   Mark3?
  medicineBallThrow Float?
  verticalJumpCm    Float?
  tripleBroadJumpM  Float?
  squatWeightKg     Float?
  gripRightKg       Float?
  gripLeftKg        Float?
  athlete           Athlete  @relation(fields: [athleteId], references: [id])
  roms              Rom[]
}

model Rom {
  id           String     @id @default(cuid())
  assessmentId String
  movement     Movement
  side         BodySide
  valueDeg     Float
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  @@unique([assessmentId, movement, side])
}

model Clinic {
  id          String               @id @default(cuid())
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  sessions    Appointment[]
  templates   EvaluationTemplate[]
  memberships Membership[]
  metrics     Metric[]
  patients    Patient[]
  records     Record[]
  reminders   Reminder[]
}

model User {
  id             String               @id @default(cuid())
  email          String               @unique
  name           String?
  passwordHash   String?
  assigned       Appointment[]        @relation("AppointmentAssignee")
  athletes       Athlete[]
  ownedTemplates EvaluationTemplate[] @relation("UserOwnedTemplates")
  memberships    Membership[]
  records        Record[]
  subscription   Subscription?
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  clinicId  String
  role      Role
  createdAt DateTime @default(now())
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, clinicId])
}

model Patient {
  id         String        @id @default(cuid())
  clinicId   String
  fullName   String
  sex        String?
  dob        DateTime?
  phone      String?
  email      String?
  allergies  String[]
  conditions String[]
  tags       String[]
  consents   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sessions   Appointment[]
  metrics    Metric[]
  clinic     Clinic        @relation(fields: [clinicId], references: [id])
  records    Record[]
}

model EvaluationTemplate {
  id        String     @id @default(cuid())
  clinicId  String
  ownerId   String?
  name      String
  type      RecordType
  content   Json
  shared    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  clinic    Clinic     @relation(fields: [clinicId], references: [id])
  owner     User?      @relation("UserOwnedTemplates", fields: [ownerId], references: [id])
}

model Record {
  id        String     @id @default(cuid())
  clinicId  String
  patientId String
  authorId  String?
  type      RecordType
  hashtags  String[]
  content   Json
  createdAt DateTime   @default(now())
  author    User?      @relation(fields: [authorId], references: [id])
  clinic    Clinic     @relation(fields: [clinicId], references: [id])
  patient   Patient    @relation(fields: [patientId], references: [id])
}

model Metric {
  id         String     @id @default(cuid())
  clinicId   String
  patientId  String
  date       DateTime   @default(now())
  metricType MetricType
  label      String?
  value      Float?
  side       BodySide?
  movement   Movement?
  clinic     Clinic     @relation(fields: [clinicId], references: [id])
  patient    Patient    @relation(fields: [patientId], references: [id])
}

model RomTarget {
  id        String   @id @default(cuid())
  athleteId String
  movement  Movement
  targetDeg Float
  athlete   Athlete  @relation(fields: [athleteId], references: [id])

  @@unique([athleteId, movement])
}

model Appointment {
  id                String        @id @default(cuid())
  clinicId          String
  patientId         String
  status            SessionStatus @default(SCHEDULED)
  scheduledAt       DateTime
  checkedInAt       DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  rescheduledReason String?
  assigneeId        String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  assignee          User?         @relation("AppointmentAssignee", fields: [assigneeId], references: [id])
  clinic            Clinic        @relation(fields: [clinicId], references: [id])
  patient           Patient       @relation(fields: [patientId], references: [id])
  reminders         Reminder[]
}

model Reminder {
  id            String      @id @default(cuid())
  clinicId      String
  appointmentId String
  channel       String
  scheduledFor  DateTime
  sentAt        DateTime?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  clinic        Clinic      @relation(fields: [clinicId], references: [id])
}

enum Position {
  PITCHER
  CATCHER
  INFIELDER
  OUTFIELDER
  OTHER
}

enum ThrowingSide {
  RIGHT
  LEFT
}

enum Batting {
  RIGHT
  LEFT
  SWITCH
}

enum Movement {
  SHOULDER_FLEX
  SHOULDER_ER_90
  SHOULDER_IR_90
  HORIZONTAL_ADDUCTION
  ELBOW_EXTENSION
  FOREARM_PRONATION
  FOREARM_SUPINATION
  HIP_FLEXION
  HIP_EXTENSION
  HIP_IR
  HIP_ER
}

enum BodySide {
  RIGHT
  LEFT
}

enum Role {
  OWNER
  ADMIN
  THERAPIST
  ASSISTANT
  VIEWER
  ATHLETE
}

enum SessionStatus {
  SCHEDULED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum RecordType {
  SOAP
  EVAL
  PROGRESS
}

enum MetricType {
  VAS
  NRS
  ROM
  MMT
  CUSTOM
}

enum Mark3 {
  CIRCLE
  TRIANGLE
  CROSS
}

enum InfieldPosition {
  FIRST_BASE
  SECOND_BASE
  THIRD_BASE
  SHORTSTOP
}

// ===== Subscription (Plans) =====
enum Plan {
  FREE
  SOLO
  CLINIC
  TEAM
}

enum SubscriptionStatus {
  inactive
  active
  trialing
  past_due
  canceled
}

model Subscription {
  id               String              @id @default(cuid())
  userId           String              @unique
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan             Plan                @default(FREE)
  status           SubscriptionStatus  @default(inactive)
  stripeCustomerId String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}
